import 'package:dio/dio.dart';
import 'package:retrofit/retrofit.dart';

part 'ai_report_service.g.dart';

/// Response model for AI report generation.
///
/// This class represents the JSON response from the AI API
/// when generating a report.
class AiReportResponse {
  /// The generated report text from the AI.
  final String report;

  /// Creates an instance of [AiReportResponse].
  const AiReportResponse({required this.report});

  /// Creates an instance from JSON.
  factory AiReportResponse.fromJson(Map<String, dynamic> json) {
    return AiReportResponse(report: json['report'] as String);
  }

  /// Converts the instance to JSON.
  Map<String, dynamic> toJson() {
    return {'report': report};
  }
}

/// Retrofit service interface for AI report generation API.
///
/// This abstract class defines the contract for communicating with the AI API
/// using Retrofit annotations. The implementation is generated by retrofit_generator.
///
/// Usage example:
/// ```dart
/// final dio = Dio(BaseOptions(baseUrl: 'https://api.example.com'));
/// final service = AiReportService(dio);
/// final response = await service.generateReport({'userData': {...}});
/// ```
@RestApi()
abstract class AiReportService {
  /// Factory constructor that creates an instance using the generated implementation.
  ///
  /// [dio] The Dio instance to use for HTTP requests.
  /// [baseUrl] Optional base URL override. If not provided, uses Dio's base URL.
  factory AiReportService(Dio dio, {String? baseUrl}) = _AiReportService;

  /// Generates an AI report based on user data.
  ///
  /// Sends a POST request to the '/generateReport' endpoint with user data
  /// and returns the generated report text.
  ///
  /// [userData] A map containing all the user's journal data and priorities.
  /// The structure should match the format from [JournalRepository.getAllUserData()].
  ///
  /// Returns the [AiReportResponse] containing the generated report text.
  ///
  /// Throws [DioException] if the request fails.
  @POST('/generateReport')
  Future<AiReportResponse> generateReport(
    @Body() Map<String, dynamic> userData,
  );
}
